"""
Interface graphique tkinter pour l'analyse des statistiques PMT.
Affiche les r√©sultats directement dans l'interface.

author : CAPELLE Gabin
"""

import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import threading
import os
import traceback
from pathlib import Path
import pandas as pd

# Import des fonctions du script principal
from utils import (
    charger_donnees_csv,
    preparer_donnees,
    supprimer_doublons,
    appliquer_filtres_base,
    calculer_statistiques_employes,
    calculer_moyennes_equipe,
    formater_donnees_finales,
    analyser_codes_presence,
    sauvegarder_excel,
    afficher_resume_final
)
import config


class StatistiquesPMTInterface:
    """Interface graphique compl√®te pour l'analyse des statistiques PMT."""
    
    def __init__(self, root):
        self.root = root
        self.csv_file_path = None
        self.stats_final = None
        self.moyennes_equipe = None
        self.setup_ui()
    
    def setup_ui(self):
        """Configure l'interface utilisateur."""
        # Configuration de la fen√™tre principale
        self.root.title("üìä Statistiques PMT - Analyse des Plannings")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal avec padding
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configuration du redimensionnement
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # Titre
        title_label = ttk.Label(
            main_frame, 
            text="üìä Analyse des Statistiques PMT",
            font=('Arial', 16, 'bold')
        )
        title_label.grid(row=0, column=0, pady=(0, 10), sticky=tk.W+tk.E)
        
        # Description
        desc_label = ttk.Label(
            main_frame,
            text="S√©lectionnez un fichier CSV de planning journalier pour analyser les statistiques.",
            justify=tk.CENTER
        )
        desc_label.grid(row=1, column=0, pady=(0, 20), sticky=tk.W+tk.E)
        
        # Section s√©lection de fichier
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ S√©lection du fichier", padding="15")
        file_frame.grid(row=2, column=0, sticky=tk.W+tk.E, pady=(0, 15))
        file_frame.columnconfigure(1, weight=1)
        
        # Bouton s√©lection
        self.select_button = ttk.Button(
            file_frame,
            text="üîç S√©lectionner le fichier CSV",
            command=self.select_csv_file
        )
        self.select_button.grid(row=0, column=0, padx=(0, 10))
        
        # Label fichier s√©lectionn√©
        self.file_label = ttk.Label(file_frame, text="Aucun fichier s√©lectionn√©")
        self.file_label.grid(row=0, column=1, sticky=tk.W+tk.E)
        
        # Bouton traitement
        self.process_button = ttk.Button(
            file_frame,
            text="üöÄ Lancer l'analyse",
            command=self.start_processing,
            state='disabled'
        )
        self.process_button.grid(row=1, column=0, columnspan=2, pady=(15, 0), sticky=tk.W+tk.E)
        
        # Barre de progression
        self.progress = ttk.Progressbar(file_frame, mode='indeterminate')
        self.progress.grid(row=2, column=0, columnspan=2, pady=(10, 0), sticky=tk.W+tk.E)
        
        # Zone de logs/r√©sultats
        log_frame = ttk.LabelFrame(main_frame, text="üìã Journal d'ex√©cution et R√©sultats", padding="10")
        log_frame.grid(row=3, column=0, sticky=tk.W+tk.E+tk.N+tk.S, pady=(15, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # Zone de texte avec scrollbar
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=20,
            wrap=tk.WORD,
            font=('Courier', 12)
        )
        self.log_text.grid(row=0, column=0, sticky=tk.W+tk.E+tk.N+tk.S)
        
        # Boutons en bas
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, pady=(15, 0), sticky=tk.W+tk.E)
        
        # Bouton exporter Excel
        self.export_button = ttk.Button(
            button_frame, 
            text="üíæ Exporter vers Excel", 
            command=self.export_to_excel,
            state='disabled'
        )
        self.export_button.pack(side=tk.LEFT)
        
        # Bouton aide
        help_button = ttk.Button(button_frame, text="‚ùì Aide", command=self.show_help)
        help_button.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Message de bienvenue
        self.log_message("üéâ Application pr√™te ! S√©lectionnez un fichier CSV pour commencer.")
    

    
    def select_csv_file(self):
        """Ouvre une bo√Æte de dialogue pour s√©lectionner le fichier CSV."""
        file_path = filedialog.askopenfilename(
            title="S√©lectionner le fichier CSV de planning",
            filetypes=[("Fichiers CSV", "*.csv"), ("Tous les fichiers", "*.*")]
        )
        
        if file_path:
            self.csv_file_path = file_path
            file_name = os.path.basename(file_path)
            self.file_label.config(text=f"üìÑ Fichier : {file_name}")
            self.process_button.config(state='normal')
            self.log_message(f"‚úÖ Fichier s√©lectionn√© : {file_path}")
    
    def start_processing(self):
        """Lance le traitement des donn√©es en arri√®re-plan."""
        if not self.csv_file_path:
            messagebox.showerror("Erreur", "Veuillez d'abord s√©lectionner un fichier CSV.")
            return
        
        # D√©sactiver les boutons pendant le traitement
        self.select_button.config(state='disabled')
        self.process_button.config(state='disabled')
        self.progress.start(10)
        
        # Vider les logs pr√©c√©dents
        self.log_text.delete(1.0, tk.END)
        self.log_message("üöÄ D√©marrage du traitement...")
        
        # Lancer le traitement dans un thread s√©par√©
        thread = threading.Thread(target=self.process_data)
        thread.daemon = True
        thread.start()
    
    def process_data(self):
        """Traite les donn√©es PMT (ex√©cut√© dans un thread s√©par√©)."""
        try:
            # Mise √† jour du chemin du fichier CSV dans la config
            config.FICHIER_CSV = self.csv_file_path
            
            self.log_message("üîÑ Chargement des donn√©es CSV...")
            df_originel = charger_donnees_csv()
            if df_originel is None:
                self.on_error("‚ùå Erreur lors du chargement du fichier CSV")
                return
            
            self.log_message(f"‚úÖ {len(df_originel)} lignes charg√©es")
            
            self.log_message("üîÑ Pr√©paration des donn√©es...")
            df_equipe = preparer_donnees(df_originel)
            
            self.log_message("üîÑ Suppression des doublons...")
            df_unique = supprimer_doublons(df_equipe)
            
            self.log_message("üîÑ Application des filtres...")
            df_filtre = appliquer_filtres_base(df_unique)
            self.log_message(f"‚úÖ {len(df_filtre)} lignes apr√®s filtrage")
            
            self.log_message("üîÑ Analyse des codes de pr√©sence...")
            codes_uniques = analyser_codes_presence(df_filtre)
            
            self.log_message("üîÑ Calcul des statistiques par employ√©...")
            stats_employes = calculer_statistiques_employes(df_filtre)
            
            self.log_message("üîÑ Formatage des donn√©es finales...")
            stats_final = formater_donnees_finales(stats_employes)
            
            self.log_message("üîÑ Calcul des moyennes par √©quipe...")
            moyennes_equipe = calculer_moyennes_equipe(stats_final)
            
            # Stocker les r√©sultats
            self.stats_final = stats_final
            self.moyennes_equipe = moyennes_equipe
            
            self.log_message("‚úÖ Traitement termin√© avec succ√®s !")
            self.on_success()
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du traitement :\n{str(e)}\n\n{traceback.format_exc()}"
            self.on_error(error_msg)
    
    def on_success(self):
        """Appel√© quand le traitement se termine avec succ√®s."""
        self.root.after(0, self._on_success_ui)
    
    def _on_success_ui(self):
        """Met √† jour l'UI apr√®s un traitement r√©ussi."""
        # R√©activer les boutons
        self.select_button.config(state='normal')
        self.process_button.config(state='normal')
        self.export_button.config(state='normal')
        self.progress.stop()
        
        # Afficher le r√©sum√© dans le journal
        self.display_summary_in_log()
        
        # Message de succ√®s
        messagebox.showinfo(
            "Traitement termin√©",
            f"‚úÖ Analyse termin√©e avec succ√®s !\n\n"
            f"‚Ä¢ {len(self.stats_final)} employ√©s analys√©s\n"
            f"‚Ä¢ {len(self.moyennes_equipe)} √©quipes trait√©es\n\n"
            f"Consultez le journal pour voir le r√©sum√© d√©taill√©."
        )
    
    def display_summary_in_log(self):
        """Affiche le r√©sum√© de l'analyse dans le journal d'ex√©cution."""
        if self.stats_final is None or self.moyennes_equipe is None:
            return
        
        # Calculer les statistiques globales
        nb_employes = len(self.stats_final)
        nb_equipes = len(self.moyennes_equipe)
        
        # Statistiques g√©n√©rales
        moy_heures = self.stats_final['Total_Heures_Travaill√©es'].mean()
        moy_jours = self.stats_final['Total_Jours_Travaill√©s'].mean()
        moy_presence = self.stats_final['Pr√©sence_%_365j'].mean()
        
        # Top 5 employ√©s par heures travaill√©es
        top_employes = self.stats_final.nlargest(5, 'Total_Heures_Travaill√©es')
        
        # Trouver la meilleure √©quipe (v√©rifier les colonnes disponibles)
        if not self.moyennes_equipe.empty:
            # Chercher la colonne des heures travaill√©es dans moyennes_equipe
            heures_col = None
            for col in self.moyennes_equipe.columns:
                if 'Heures_Travaill√©es' in col or 'heures' in col.lower():
                    heures_col = col
                    break
            
            if heures_col:
                best_team = self.moyennes_equipe.loc[self.moyennes_equipe[heures_col].idxmax()]
            else:
                best_team = self.moyennes_equipe.iloc[0]  # Premi√®re √©quipe par d√©faut
        
        # Ajouter le r√©sum√© au journal
        self.log_message("\n" + "="*60)
        self.log_message("üìä R√âSUM√â DE L'ANALYSE DES STATISTIQUES PMT")
        self.log_message("="*60)
        self.log_message("")
        self.log_message("üìà STATISTIQUES G√âN√âRALES")
        self.log_message(f"‚Ä¢ Nombre d'employ√©s analys√©s : {nb_employes}")
        self.log_message(f"‚Ä¢ Nombre d'√©quipes : {nb_equipes}")
        self.log_message(f"‚Ä¢ Moyenne d'heures travaill√©es par employ√© : {moy_heures:.1f}h")
        self.log_message(f"‚Ä¢ Moyenne de jours travaill√©s par employ√© : {moy_jours:.1f} jours")
        self.log_message(f"‚Ä¢ Taux de pr√©sence moyen : {moy_presence:.1f}%")
        self.log_message("")
        
        self.log_message("üèÜ TOP 5 EMPLOY√âS (par heures travaill√©es)")
        for i, (_, emp) in enumerate(top_employes.iterrows(), 1):
            self.log_message(f"{i}. {emp['Pr√©nom']} {emp['Nom']} ({emp['√âquipe']}) : {emp['Total_Heures_Travaill√©es']:.1f}h")
        self.log_message("")
        
        if heures_col and not self.moyennes_equipe.empty:
            self.log_message("üè¢ MEILLEURE √âQUIPE (par moyenne d'heures)")
            self.log_message(f"‚Ä¢ {best_team['√âquipe']} : {best_team[heures_col]:.1f}h en moyenne")
            if 'Nb_Employ√©s' in best_team:
                self.log_message(f"‚Ä¢ {best_team['Nb_Employ√©s']:.0f} employ√©s")
            self.log_message("")
        
        self.log_message("üìã R√âPARTITION PAR √âQUIPE")
        for _, team in self.moyennes_equipe.iterrows():
            nb_emp = team.get('Nb_Employ√©s', 'N/A')
            if heures_col:
                heures_moy = team[heures_col]
                self.log_message(f"‚Ä¢ {team['√âquipe']} : {nb_emp} employ√©s, {heures_moy:.1f}h moy.")
            else:
                self.log_message(f"‚Ä¢ {team['√âquipe']} : {nb_emp} employ√©s")
        self.log_message("")
        
        self.log_message("üìÅ FICHIER SOURCE")
        self.log_message(f"‚Ä¢ {os.path.basename(self.csv_file_path)}")
        self.log_message(f"‚Ä¢ Trait√© le {pd.Timestamp.now().strftime('%d/%m/%Y √† %H:%M')}")
        self.log_message("")
        
        self.log_message("üíæ EXPORT")
        self.log_message("‚Ä¢ Utilisez le bouton 'Exporter vers Excel' pour sauvegarder les r√©sultats")
        self.log_message("‚Ä¢ Le fichier Excel contiendra tous les d√©tails par employ√© et par √©quipe")
        self.log_message("")
        self.log_message("="*60)
    
    def export_to_excel(self):
        """Exporte les r√©sultats vers Excel."""
        if self.stats_final is None or self.moyennes_equipe is None:
            messagebox.showerror("Erreur", "Aucune donn√©e √† exporter.")
            return
        
        try:
            sauvegarder_excel(self.stats_final, self.moyennes_equipe)
            messagebox.showinfo(
                "Export r√©ussi",
                f"‚úÖ Fichier Excel export√© avec succ√®s !\n\n"
                f"Fichier : {config.FICHIER_EXCEL}"
            )
        except Exception as e:
            messagebox.showerror("Erreur d'export", f"‚ùå Erreur lors de l'export :\n{str(e)}")
    
    def on_error(self, error_message):
        """Appel√© quand une erreur survient pendant le traitement."""
        self.root.after(0, self._on_error_ui, error_message)
    
    def _on_error_ui(self, error_message):
        """Met √† jour l'UI apr√®s une erreur."""
        self.log_message(error_message)
        
        # R√©activer les boutons
        self.select_button.config(state='normal')
        self.process_button.config(state='normal')
        self.progress.stop()
        
        # Afficher une bo√Æte de dialogue d'erreur
        messagebox.showerror(
            "Erreur de traitement",
            "‚ùå Une erreur s'est produite pendant le traitement.\n\n"
            "Consultez le journal d'ex√©cution pour plus de d√©tails."
        )
    
    def log_message(self, message):
        """Ajoute un message au journal d'ex√©cution."""
        if threading.current_thread() != threading.main_thread():
            self.root.after(0, self._log_message_ui, message)
        else:
            self._log_message_ui(message)
    
    def _log_message_ui(self, message):
        """Met √† jour le journal d'ex√©cution dans l'UI."""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def show_help(self):
        """Affiche l'aide de l'application."""
        help_text = """üìä Aide - Statistiques PMT

üéØ OBJECTIF :
Cette application analyse les fichiers CSV de planning journalier Enedis 
et affiche un r√©sum√© d√©taill√© des statistiques.

üìã UTILISATION :
1. Cliquez sur "üîç S√©lectionner le fichier CSV"
2. Choisissez votre fichier de planning journalier (.csv)
3. Cliquez sur "üöÄ Lancer l'analyse"
4. Consultez le r√©sum√© affich√© dans le journal d'ex√©cution

üíæ EXPORT :
‚Ä¢ Utilisez le bouton "üíæ Exporter vers Excel" pour sauvegarder les r√©sultats
‚Ä¢ Le fichier Excel contiendra tous les d√©tails par employ√© et par √©quipe

üìä R√âSUM√â AFFICH√â :
‚Ä¢ Statistiques g√©n√©rales (nombre d'employ√©s, moyennes, etc.)
‚Ä¢ Top 5 des employ√©s par heures travaill√©es
‚Ä¢ Meilleure √©quipe par performance
‚Ä¢ R√©partition d√©taill√©e par √©quipe

‚öôÔ∏è CONFIGURATION :
Les param√®tres (horaires, √©quipes, etc.) sont configurables dans le fichier config.py

Version : 2.0 (Interface simplifi√©e)
Auteur : CAPELLE Gabin"""
        
        messagebox.showinfo("Aide", help_text)


def main():
    """Point d'entr√©e principal de l'application."""
    root = tk.Tk()
    app = StatistiquesPMTInterface(root)
    
    # Centrer la fen√™tre
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f"{width}x{height}+{x}+{y}")
    
    # Lancer l'application
    root.mainloop()


if __name__ == "__main__":
    main() 