name: Build PMT Analytics Executables

# D√©clencheurs optimis√©s pour √©conomiser les minutes
on:
  # Compilation automatique sur les tags de release
  push:
    tags:
      - "v*"

  # D√©clenchement manuel pour les tests
  workflow_dispatch:
    inputs:
      build_macos:
        description: "Build macOS executable"
        required: true
        default: true
        type: boolean
      build_windows:
        description: "Build Windows executable"
        required: true
        default: true
        type: boolean

# Variables d'environnement globales
env:
  PYTHON_VERSION: "3.12"
  APP_NAME: "PMTAnalytics"

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    # Strat√©gie matricielle pour compiler sur plusieurs OS
    strategy:
      fail-fast: false # Continue m√™me si un OS √©choue
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: PMTAnalytics-Windows
            executable_path: dist/PMTAnalytics.exe

          - os: macos-latest
            platform: macos
            artifact_name: PMTAnalytics-macOS
            executable_path: dist/PMTAnalytics.app

    # Conditions pour √©conomiser les minutes
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && 
       ((matrix.platform == 'windows' && github.event.inputs.build_windows == 'true') ||
        (matrix.platform == 'macos' && github.event.inputs.build_macos == 'true')))

    steps:
      # 1. Checkout du code
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # 2. Configuration Python avec cache
      - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      # 3. Installation des d√©pendances avec cache
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. V√©rification de l'environnement
      - name: üîç Verify environment
        run: |
          python --version
          pip list
          ls -la

      # 5. Build de l'ex√©cutable
      - name: üî® Build executable
        run: python scripts/build_ci.py

      # 6. V√©rification du build
      - name: ‚úÖ Verify build
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            ls -la dist/
            file dist/PMTAnalytics.exe || echo "File command not available"
          else
            ls -la dist/
            ls -la dist/PMTAnalytics.app/
          fi
        shell: bash

      # 7. Pr√©paration de l'artifact
      - name: üì¶ Prepare artifact
        run: |
          mkdir -p release
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp dist/PMTAnalytics.exe release/
            echo "Executable Windows cr√©√©" > release/README.txt
          else
            cp -r dist/PMTAnalytics.app release/
            echo "Application macOS cr√©√©e" > release/README.txt
          fi
          echo "Version: ${{ github.ref_name || 'manual-build' }}" >> release/README.txt
          echo "Build date: $(date)" >> release/README.txt
          echo "Platform: ${{ matrix.platform }}" >> release/README.txt
        shell: bash

      # 8. Upload de l'artifact
      - name: üì§ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/
          retention-days: 30
          compression-level: 6

      # 9. Calcul de la taille pour info
      - name: üìä Build info
        run: |
          echo "=== BUILD SUMMARY ==="
          echo "Platform: ${{ matrix.platform }}"
          echo "Artifact: ${{ matrix.artifact_name }}"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            size=$(stat -f%z release/PMTAnalytics.exe 2>/dev/null || stat -c%s release/PMTAnalytics.exe)
          else
            size=$(du -sk release/PMTAnalytics.app | cut -f1)
            size=$((size * 1024))
          fi
          echo "Size: $((size / 1024 / 1024)) MB"
          echo "===================="
        shell: bash

  # Job de cr√©ation de release automatique
  create-release:
    name: üìã Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: üì¶ Prepare release assets
        run: |
          mkdir -p release-assets
          cd artifacts

          # Cr√©er les archives ZIP
          if [ -d "PMTAnalytics-Windows" ]; then
            cd PMTAnalytics-Windows
            zip -r ../../release-assets/PMTAnalytics-Windows-${{ github.ref_name }}.zip .
            cd ..
          fi

          if [ -d "PMTAnalytics-macOS" ]; then
            cd PMTAnalytics-macOS  
            zip -r ../../release-assets/PMTAnalytics-macOS-${{ github.ref_name }}.zip .
            cd ..
          fi

          cd ..
          ls -la release-assets/

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          name: PMT Analytics ${{ github.ref_name }}
          body: |
            ## PMT Analytics ${{ github.ref_name }}

            ### üì• T√©l√©chargements

            - **Windows** : `PMTAnalytics-Windows-${{ github.ref_name }}.zip`
            - **macOS** : `PMTAnalytics-macOS-${{ github.ref_name }}.zip`

            ### üöÄ Installation

            **Windows :**
            1. T√©l√©chargez le fichier ZIP Windows
            2. D√©compressez-le
            3. Double-cliquez sur `PMTAnalytics.exe`

            **macOS :**
            1. T√©l√©chargez le fichier ZIP macOS
            2. D√©compressez-le
            3. Double-cliquez sur `PMTAnalytics.app`

            ### üìù Notes

            - Build automatique via GitHub Actions
            - Test√© sur Windows et macOS
            - Date de build : ${{ github.run_id }}

          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
