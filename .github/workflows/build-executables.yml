name: Build PMT Analytics Executables

# Permissions nécessaires pour créer des releases
permissions:
  contents: write
  actions: read

# Déclencheurs optimisés pour économiser les minutes
on:
  # Compilation automatique UNIQUEMENT sur les tags de release
  push:
    tags:
      - "v*"

  # Déclenchement manuel pour les tests
  workflow_dispatch:
    inputs:
      build_macos:
        description: "Build macOS executable"
        required: true
        default: true
        type: boolean
      build_windows:
        description: "Build Windows executable"
        required: true
        default: true
        type: boolean

# Variables d'environnement globales
env:
  PYTHON_VERSION: "3.12"
  APP_NAME: "PMTAnalytics"

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    # Stratégie matricielle pour compiler sur plusieurs OS
    strategy:
      fail-fast: false # Continue même si un OS échoue
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: PMTAnalytics-Windows
            executable_path: dist/PMTAnalytics.exe

          - os: macos-latest
            platform: macos
            artifact_name: PMTAnalytics-macOS
            executable_path: dist/PMTAnalytics.app

    steps:
      # 1. Checkout du code
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. Configuration Python avec cache
      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      # 3. Installation des dépendances avec cache
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Vérification de l'environnement
      - name: 🔍 Verify environment
        run: |
          python --version
          pip list
        shell: bash

      # 5. Build de l'exécutable
      - name: 🔨 Build executable
        run: python scripts/build_ci.py

      # 6. Vérification du build
      - name: ✅ Verify build
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            ls -la dist/
            file dist/PMTAnalytics.exe || echo "File command not available"
          else
            ls -la dist/
            ls -la dist/PMTAnalytics.app/
          fi
        shell: bash

      # 7. Préparation de l'artifact
      - name: 📦 Prepare artifact
        run: |
          mkdir -p release
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp dist/PMTAnalytics.exe release/
          else
            cp -r dist/PMTAnalytics.app release/
          fi

          # Créer le README avec le contenu du CHANGELOG + lien GitHub
          cat CHANGELOG.md > release/README.txt
          echo "" >> release/README.txt
          echo "**Repository GitHub** : https://github.com/CapelleGab/ENEDIS-charge-pmt.git" >> release/README.txt
        shell: bash

      # 8. Upload de l'artifact
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/
          retention-days: 30
          compression-level: 6

      # 9. Calcul de la taille pour info
      - name: 📊 Build info
        run: |
          echo "=== BUILD SUMMARY ==="
          echo "Platform: ${{ matrix.platform }}"
          echo "Artifact: ${{ matrix.artifact_name }}"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            size=$(stat -f%z release/PMTAnalytics.exe 2>/dev/null || stat -c%s release/PMTAnalytics.exe)
          else
            size=$(du -sk release/PMTAnalytics.app | cut -f1)
            size=$((size * 1024))
          fi
          echo "Size: $((size / 1024 / 1024)) MB"
          echo "===================="
        shell: bash

  # Job de création de release automatique
  create-release:
    name: 📋 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && always()

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 📦 Prepare release assets
        run: |
          mkdir -p release-assets
          echo "Contenu du dossier artifacts:"
          ls -la artifacts/ || echo "Pas d'artifacts trouvés"

          cd artifacts || exit 1

          # Créer les archives ZIP si les dossiers existent
          if [ -d "PMTAnalytics-Windows" ]; then
            echo "Création archive Windows..."
            cd PMTAnalytics-Windows
            zip -r ../../release-assets/PMTAnalytics-Windows-${{ github.ref_name }}.zip .
            cd ..
            echo "Archive Windows créée"
          else
            echo "Pas d'artifacts Windows trouvés"
          fi

          if [ -d "PMTAnalytics-macOS" ]; then
            echo "Création archive macOS..."
            cd PMTAnalytics-macOS  
            zip -r ../../release-assets/PMTAnalytics-macOS-${{ github.ref_name }}.zip .
            cd ..
            echo "Archive macOS créée"
          else
            echo "Pas d'artifacts macOS trouvés"
          fi

          cd ..
          echo "Contenu final release-assets:"
          ls -la release-assets/ || echo "Aucun fichier de release créé"

      - name: 📥 Checkout for changelog
        uses: actions/checkout@v4

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          name: PMT Analytics ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
